{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenido a MkDocs For full documentation visit mkdocs.org . Comandos mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Maquetaci\u00f3n del proyecto mkdocs.yml # Archivo de configraci\u00f3n docs/ # Carpeta raiz por defecto index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Bienvenido a MkDocs"},{"location":"#bienvenido-a-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Bienvenido a MkDocs"},{"location":"#comandos","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Comandos"},{"location":"#maquetacion-del-proyecto","text":"mkdocs.yml # Archivo de configraci\u00f3n docs/ # Carpeta raiz por defecto index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Maquetaci\u00f3n del proyecto"},{"location":"DJANGO/DEPLOY%20TO%20HK/","text":"REQUERIMIENTOS: Tambien el HEROKU CLI que nos ayudar\u00e1 mucho a poder observar nuestros log sobre errores y algunas configuraciones extra. GitHub CLI que tambien nos ayudar\u00e1 gestionar nuestro repo desde consola. VIRTUAL ENV 1. Creamos nuestro entorno virtual hubicandonos en la carpeta de nuestro proyecto. virtualenv . 2. Activamos nuestro entorno. source bin/activate 3. Instalamos nuestras dependencias mas importantes en este nuevo entorno que aun no tiene nada de las dependencias que necesita nuestro proyecto. pip install django pip install djangorestframework 4. Exportamos nuestro requirements. pip freeze > requirements.txt 0. GitHub CLI 1. Configuramos nuestro repositorio y lo subiremos para tenerlo ya sincronizado y poder controlar nuestros cambios por si llegamos a fallar algo. git init 2. Cuando terminemos de crear nuestro repositorio al final nos pregunta si queremos o no vincular el repositiorio y le damos a enter. gh repo create 3. Ahora vamos a subirlo. git add . git commit -m \"first commit\" git push -u origin master 2. AGREGANDO PIPs necesarios: pip install gunicorn ``` ```bash pip install psycopg2-binary ``` ```bash pip install django-heroku In one line: pip install gunicorn && pip install psycopg2-binary && pip install django-heroku ``` #### ISSUE con django-heroku Solution: ```bash sudo apt-get install --reinstall libpq-dev Font: https://stackoverflow.com/questions/11618898/pg-config-executable-not-found?page=2&tab=Votes 3. TESTEANDO SERVIDORES Es buena idea testear si nuestro proyecto est\u00e1 corriendo correctamente para ello debemos verificar en cada cambio su funcionamiento. python3 manage.py runserver 0.0.0.0:8000 gunicorn APIRestDjango.wsgi Si estamos conectados remotamente usaremos ngrok para verificar gunicorn. ngrok http 8000 gunicorn APIRestDjango.wsgi 4. Procfile Creamos el Procfile en la raiz de nuestro proyecto que necesitamos para que heroku pueda servir nuestro proyecto usando unicorn server. nano Procfile y dentro metemos este codigo que ejecuta unicorn, donde vemos el nombre de nuestro proyecto seguido de .wsgi web: gunicorn APIRestDjango.wsgi 5. Add Configs to Settings.py import django_heroku django_heroku.settings(locals()) 6. Update REPO Actualizamos las dependencias. pip freeze > requirements.txt Subimos los cambios. git add . git commit -m \"first commit\" git push -u origin master 7. CREAR Y VINCULAR Heroku APP 1 Creamos una nueva app en heroku. 2 Vinculamos esa app a nuestro repositorio. 3 Habilitamos Automatic Deploys. 4 Desplegamos la rama donde est\u00e1 nuestro proyecto. 5 listo nuestro proyecto fue desplegado. 8. Migrando BD Es necesario migrar nuestra base de datos y para heroku usaremos PostgreSQL . 1. Listamos las apps de nuestro heroku. heroku apps 2. Nos enganchamos de es app heroku git:remote -a myaplication 3. Nos conectamos a la consola de nuestra app. heroku run bash 4. (En la ultima version heroku nos crea y conecta automaticamente a una base de datos PostgreSQL) 5 . Migramos nuestra base de datos python3 manage.py migrate 6. Crea un super usuario para acceder al admin del sistema. python3 manage.py createsuperuser Nos preguntar\u00e1, esto es para admitir contrase\u00f1a no segura y nosotros le damos aque si \"y\" Bypass password validation and create user anyway? [y/N]: POSIBLE ERROR EN HEROKU Este error se da porque no activamos el free dynos y eso lo hacemos ingresando a Configure Dynos y deberia ya de estar activo: Listo eso seria todo para el deploy. FONTS: Video Principal","title":"DEPLOY TO HK"},{"location":"DJANGO/DEPLOY%20TO%20HK/#requerimientos","text":"Tambien el HEROKU CLI que nos ayudar\u00e1 mucho a poder observar nuestros log sobre errores y algunas configuraciones extra. GitHub CLI que tambien nos ayudar\u00e1 gestionar nuestro repo desde consola.","title":"REQUERIMIENTOS:"},{"location":"DJANGO/DEPLOY%20TO%20HK/#virtual-env","text":"1. Creamos nuestro entorno virtual hubicandonos en la carpeta de nuestro proyecto. virtualenv . 2. Activamos nuestro entorno. source bin/activate 3. Instalamos nuestras dependencias mas importantes en este nuevo entorno que aun no tiene nada de las dependencias que necesita nuestro proyecto. pip install django pip install djangorestframework 4. Exportamos nuestro requirements. pip freeze > requirements.txt","title":"VIRTUAL ENV"},{"location":"DJANGO/DEPLOY%20TO%20HK/#0-github-cli","text":"1. Configuramos nuestro repositorio y lo subiremos para tenerlo ya sincronizado y poder controlar nuestros cambios por si llegamos a fallar algo. git init 2. Cuando terminemos de crear nuestro repositorio al final nos pregunta si queremos o no vincular el repositiorio y le damos a enter. gh repo create 3. Ahora vamos a subirlo. git add . git commit -m \"first commit\" git push -u origin master","title":"0. GitHub CLI"},{"location":"DJANGO/DEPLOY%20TO%20HK/#2-agregando-pips-necesarios","text":"pip install gunicorn ``` ```bash pip install psycopg2-binary ``` ```bash pip install django-heroku In one line: pip install gunicorn && pip install psycopg2-binary && pip install django-heroku ``` #### ISSUE con django-heroku Solution: ```bash sudo apt-get install --reinstall libpq-dev Font: https://stackoverflow.com/questions/11618898/pg-config-executable-not-found?page=2&tab=Votes","title":"2. AGREGANDO PIPs necesarios:"},{"location":"DJANGO/DEPLOY%20TO%20HK/#3-testeando-servidores","text":"Es buena idea testear si nuestro proyecto est\u00e1 corriendo correctamente para ello debemos verificar en cada cambio su funcionamiento. python3 manage.py runserver 0.0.0.0:8000 gunicorn APIRestDjango.wsgi Si estamos conectados remotamente usaremos ngrok para verificar gunicorn. ngrok http 8000 gunicorn APIRestDjango.wsgi","title":"3. TESTEANDO SERVIDORES"},{"location":"DJANGO/DEPLOY%20TO%20HK/#4-procfile","text":"Creamos el Procfile en la raiz de nuestro proyecto que necesitamos para que heroku pueda servir nuestro proyecto usando unicorn server. nano Procfile y dentro metemos este codigo que ejecuta unicorn, donde vemos el nombre de nuestro proyecto seguido de .wsgi web: gunicorn APIRestDjango.wsgi","title":"4. Procfile"},{"location":"DJANGO/DEPLOY%20TO%20HK/#5-add-configs-to-settingspy","text":"import django_heroku django_heroku.settings(locals())","title":"5. Add Configs to Settings.py"},{"location":"DJANGO/DEPLOY%20TO%20HK/#6-update-repo","text":"Actualizamos las dependencias. pip freeze > requirements.txt Subimos los cambios. git add . git commit -m \"first commit\" git push -u origin master","title":"6. Update REPO"},{"location":"DJANGO/DEPLOY%20TO%20HK/#7-crear-y-vincular-heroku-app","text":"1 Creamos una nueva app en heroku. 2 Vinculamos esa app a nuestro repositorio. 3 Habilitamos Automatic Deploys. 4 Desplegamos la rama donde est\u00e1 nuestro proyecto. 5 listo nuestro proyecto fue desplegado.","title":"7. CREAR Y VINCULAR Heroku APP"},{"location":"DJANGO/DEPLOY%20TO%20HK/#8-migrando-bd","text":"Es necesario migrar nuestra base de datos y para heroku usaremos PostgreSQL . 1. Listamos las apps de nuestro heroku. heroku apps 2. Nos enganchamos de es app heroku git:remote -a myaplication 3. Nos conectamos a la consola de nuestra app. heroku run bash 4. (En la ultima version heroku nos crea y conecta automaticamente a una base de datos PostgreSQL) 5 . Migramos nuestra base de datos python3 manage.py migrate 6. Crea un super usuario para acceder al admin del sistema. python3 manage.py createsuperuser Nos preguntar\u00e1, esto es para admitir contrase\u00f1a no segura y nosotros le damos aque si \"y\" Bypass password validation and create user anyway? [y/N]:","title":"8. Migrando BD"},{"location":"DJANGO/DEPLOY%20TO%20HK/#posible-error-en-heroku","text":"Este error se da porque no activamos el free dynos y eso lo hacemos ingresando a Configure Dynos y deberia ya de estar activo: Listo eso seria todo para el deploy.","title":"POSIBLE ERROR EN HEROKU"},{"location":"DJANGO/DEPLOY%20TO%20HK/#fonts","text":"Video Principal","title":"FONTS:"},{"location":"DJANGO/INIT/","text":"CONFIGURAR ENTORNO | Requisito tener instalado el Python 3.9 o 3.10 debe estar registrado en el path del sistema | Si estamos en Linux deberemos escribir python3 para ejecutar algunos comandos si es que nos da error. 1. Instalando en forma global los paquetes para crear un entorno virtual. pip install virtualenv 2. Crea un entorno virtual en la ruta donde estamos ubicados con el nombre e3.9 virtualenv e3.9 3. Activa el entorno virtual e3.9\\Scripts\\activate On linux: source/bin/activate PROYECTO NUEVO 1. Instala los paquetes de django en el entorno virtual pip install django 2. Muestra la lista de paquetes instalados en el entorno virtual pip freeze 3. Crea un proyecto de django con el nombre APIRestDjango django-admin startproject APIRestDjango 4. Ingresa en la carpeta del proyecto creado cd APIRestDjango 5. Crea un aplicaci\u00f3n de Django dentro del proyecto con el nombre apirest manage.py startapp apirest On linux: python3 manage.py startapp apirest 6. Ejecuta las migraciones que vienen por defecto en Django, creando las tablas de acceso al sistema y usuarios. manage.py migrate On Linux python3 manage.py migrate 7. Crea un super usuario para acceder al sistema manage.py createsuperuser On Linux python3 manage.py createsuperuser | Salir de env deactivate LEVANTAR SERVER 1. Levantar un servidor de desarrollo Django manage.py runserver 2. En el navegar para acceder al django admin http://127.0.0.1:8000/admin/ | Up on LAN python3 manage.py runserver 0.0.0.0:8000 For all: ALLOWED_HOSTS = ['*'] -- Es posible que deba agregar su direcci\u00f3n IP de LAN a ALLOWED_HOSTS en settings.py FONTS: Font: https://stackoverflow.com/questions/22144189/making-django-server-accessible-in-lan Font: https://stackoverflow.com/questions/24857158/commanderror-you-must-set-settings-allowed-hosts-if-debug-is-false/27792097 manage.py migration","title":"INIT"},{"location":"DJANGO/INIT/#configurar-entorno","text":"| Requisito tener instalado el Python 3.9 o 3.10 debe estar registrado en el path del sistema | Si estamos en Linux deberemos escribir python3 para ejecutar algunos comandos si es que nos da error. 1. Instalando en forma global los paquetes para crear un entorno virtual. pip install virtualenv 2. Crea un entorno virtual en la ruta donde estamos ubicados con el nombre e3.9 virtualenv e3.9 3. Activa el entorno virtual e3.9\\Scripts\\activate On linux: source/bin/activate","title":"CONFIGURAR ENTORNO"},{"location":"DJANGO/INIT/#proyecto-nuevo","text":"1. Instala los paquetes de django en el entorno virtual pip install django 2. Muestra la lista de paquetes instalados en el entorno virtual pip freeze 3. Crea un proyecto de django con el nombre APIRestDjango django-admin startproject APIRestDjango 4. Ingresa en la carpeta del proyecto creado cd APIRestDjango 5. Crea un aplicaci\u00f3n de Django dentro del proyecto con el nombre apirest manage.py startapp apirest On linux: python3 manage.py startapp apirest 6. Ejecuta las migraciones que vienen por defecto en Django, creando las tablas de acceso al sistema y usuarios. manage.py migrate On Linux python3 manage.py migrate 7. Crea un super usuario para acceder al sistema manage.py createsuperuser On Linux python3 manage.py createsuperuser | Salir de env deactivate","title":"PROYECTO NUEVO"},{"location":"DJANGO/INIT/#levantar-server","text":"1. Levantar un servidor de desarrollo Django manage.py runserver 2. En el navegar para acceder al django admin http://127.0.0.1:8000/admin/","title":"LEVANTAR SERVER"},{"location":"DJANGO/INIT/#up-on-lan","text":"python3 manage.py runserver 0.0.0.0:8000 For all: ALLOWED_HOSTS = ['*'] -- Es posible que deba agregar su direcci\u00f3n IP de LAN a ALLOWED_HOSTS en settings.py","title":"| Up on LAN"},{"location":"DJANGO/INIT/#fonts","text":"Font: https://stackoverflow.com/questions/22144189/making-django-server-accessible-in-lan Font: https://stackoverflow.com/questions/24857158/commanderror-you-must-set-settings-allowed-hosts-if-debug-is-false/27792097 manage.py migration","title":"FONTS:"},{"location":"DJANGO/PRACTICA%20API%20REST/","text":"Instala los paquetes de django en el entorno virtual pip install django Instalando Django Rest Framework pip install djangorestframework Enlistar requirements de nuestro entorno variable en un txt. pip freeze > requirements.txt Instalar los requisitos. pip install -r requirements.txt Run Server on LAN python3 manage.py runserver 0.0.0.0:8000 SERIALIZADORES","title":"PRACTICA API REST"},{"location":"DJANGO/PRACTICA%20API%20REST/#serializadores","text":"","title":"SERIALIZADORES"},{"location":"DJANGO/Project%20dj-prods-api/","text":"0 Preparando Entorno Creamos y activamos nuestro entorno virtual dj-prods-api . virtualenv dj-prods-api cd dj-prods-api source bin/activate | Es probable que necesitemos crear un enlace simbolico de python3 sudo ln -s /usr/bin/python3 /usr/bin/python 1 Paquetes Necesarios Instalamos los paquetes necesesarios. pip install django pip install djangorestframework OPTIONALS For GH and HK Enlistar requirements de nuestro entorno variable en un txt. para luego poderlo exportar. pip freeze > requirements.txt Iniciar y subir repositiorio para tener control sobre nuestro codigo y sus cambios. git init && git add . && gh repo create && git commit -m \"start and conect project\" && git push -u origin master && git config --get remote.origin.url o con lift - gbash: git start 2 Crando Proyecto y App DJango 1 Creamos un proyecto DJANGO nuevo: django-admin startproject DJprodsApi 2 Ingresamos al cd /DJprodsApi y creamos una aplicacion apirest : ./manage.py startapp apirest 3 Configs SQLite 1 migramos los datos a nuestra BD por defecto SQLite : ./manage.py migrate 2 Creando Super User para el ADMIN: ./manage.py createsuperuser 3 Testeamos el funcionamiento de nuestro proyecto: ./manage.py runserver LAN: ./manage.py runserver 0.0.0.0:8000 | Para Server on LAN podemos o usar ngk necesitamos habilitar los hosts en JprodsApi/DJprodsApi/settings.py ALLOWED_HOSTS = ['*'] 4 Registrar Aplicacion y DRF 1 Nos dirigimos a JprodsApi/DJprodsApi/settings.py y agregamos a INSTALLED_APPS = [ #... #Estos dos valores: 'rest_framework', 'apirest' ] 5 Creando MODELO 1 Nos hubicamos en JprodsApi/apirest/models.py no hay ningun modelo asi que agregamos una clase asi y tendriamos nuestro primer modelo. class Producto(models.Model): ##Atributos class Meta: verbose_name = (\"Producto\") verbose_name_plural = (\"Productos\") def __str__(self): return self.name #name Cambia segun Atributo queramos regresar 2 Agregamos ##Atributos a nuestro modelo. class Producto(models.Model): nombres=models.CharField(max_length=50) marca=models.CharField(max_length=50) codigo=models.CharField(max_length=8) emailemp=models.EmailField(max_length=50) created=models.DateTimeField(auto_now_add=True) updated=models.DateTimeField(auto_now=True) class Meta: verbose_name = (\"Producto\") verbose_name_plural = (\"Productos\") def __str__(self): return self.nombres 3 Ahora empaquetamos nuestra migracion con: ./manage.py makemigrations 4 Ahora si migramos nuestras nuevas makemigrations: ./manage.py migrate 5 Registramos nuestro modelo en JprodsApi/apirest/admin.py from django.contrib import admin from .models import Producto admin.site.register(Producto, ProductoAdmin) #Quita ProductoAdmin si no funciona Deberiamos de ver productos en nuestro admin al correr nuestro servidor. 6 ADMIN Config 1 Para esta config debemos agregar este codigo en nuestro JprodsApi/apirest/admin.py . from django.contrib import admin from .models import Producto #ADMING Config - para mostrar atributos de nuestros productos en el admin. class ProductoAdmin(admin.ModelAdmin): list_display = ('nombres', 'marca', 'codigo','emailemp') admin.site.register(Producto, ProductoAdmin) 7 Serializers 1 Creamos un nuevo archivo con el nombre de serializers.py dentro de JprodsApi/apirest/ y agregamos este codigo. from rest_framework import serializers from .models import Producto class ProductoSerializer(serializers.HyperlinkedModelSerializer): class Meta: model=Producto fields = ('id', 'nombres', 'marca', 'codigo','emailemp') 8 Vistas 1 Ahora editamos JprodsApi/apirest/views.py . y agregamos. from rest_framework import viewsets from .serializers import ProductoSerializer from .models import Producto class ProductoViewSet (viewsets.ModelViewSet): queryset-Producto.objects.all() serializer_class = ProductoSerializer 9 URLS o Rutas 1 Ahora editamos JprodsApi/JprodsApi/urls.py . y agregamos. from django.contrib import admin from django.urls import path # urls from django.urls.conf import include from rest_framework import routers from apirest import views router=routers.DefaultRouter() router.register('productos', views.ProductoViewSet) # urls ## urlpatterns = [ path('admin/', admin.site.urls), # urls path('api/', include(router.urls)) # urls ## ] 10 DRF Permisos De Escritura y Paginate Permisos de escritura 1 Agreganos el siguiente codigo al final de JprodsApi/DJprodsApi/settings.py : # Esto hace que se limite el acceso segun lo configuremos REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': [ ## Habilitar para restringir escritura 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly', ## Habilitar para todos los permisos #'rest_framework.permissions.AllowAny', ], ## Activar estas dos para la paginate #'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', #'PAGE_SIZE': 10 } Y listo esto har\u00e1 que ya no cualquiera con el enlace del api pueda enviar o modificar nuestros datos. 11 CRUD VISTAS BASADAS EN CLASES 1 Vamos a crear una nueva aplicaci\u00f3n llamada productos ./manage.py startapp productos 2 Registramos nuestra nueva app en settings.py del proyecto y deberia verse asi. INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'apirest', 'productos' #Nueva app ] 3 Dentro de JprodsApi/productos/ crearemos un nuevo archivo llamado urls.py de momento lo dejamos sin nada. 4 Ahora abrimos JprodsApi/productos/views.py y agregamos estas lineas: from django.views.generic import ListView,DetailView,CreateView,UpdateView,DeleteView from apirest.models import Producto class ProductoListView(ListView): model = Cliente #template_name = \".html\" 5 Nos dirigimos a JprodsApi/JprodsApi/urls.py principal y a\u00f1adimos. Agregamos esta importaci\u00f3n: from productos.views import ProductoListView ## .5 Y el path de productos: urlpatterns = [ path('admin/', admin.site.urls), # urls path('api/', include(router.urls)), # urls ## path('productos',ProductoListView.as_view(template_name=\"productos/index.html\"),name='listar') ## .5 ] 6 Ahora creamos dentro de JprodsApi/productos/ Creamos una carpeta nueva llamada templates . 7 Luego dentro de JprodsApi/productos/templates crearemos otra carpeta llamada productos y dentro de esta index.html . 8 Agregamos este codigo a nuestro index.html : <h1>Productos</h1> <ul> {% for producto in object_list %} <li>{{ producto.nombres }} - {{ producto.marca }}</li> {% empty %} <li>No articles yet.</li> {% endfor %} </ul> yyy listo hasta aqui ya solo queda continuar con el dise\u00f1o. Agregando Atributos a nuestro modelo 1 Nos vamos a JprodsApi/apirest/models.py y agregamos otro atributo, de esta manera es necesario que tenga default=\"\" de lo contrario nos saldr\u00e1 un error al crear la migraci\u00f3n. precio=models.CharField(max_length=8, default=\"\") 2 Ahora creamos la migraci\u00f3n y migramos. ./manage.py makemigrations ./manage.py migrate 3 Esto es adicional para la vista en el admin de nuestro producto, esto a\u00f1adira a la vista el valor del nuevo atributo, para ello agregamos nuestro atributo en JprodsApi/apirest/admin.py y deberia quedar asi: from .models import Producto class ProductoAdmin(admin.ModelAdmin): #New Atributo list_display = ('nombres', 'marca', 'precio', 'codigo','emailemp', 'id') admin.site.register(Producto, ProductoAdmin)","title":"Project dj prods api"},{"location":"DJANGO/Project%20dj-prods-api/#0-preparando-entorno","text":"Creamos y activamos nuestro entorno virtual dj-prods-api . virtualenv dj-prods-api cd dj-prods-api source bin/activate | Es probable que necesitemos crear un enlace simbolico de python3 sudo ln -s /usr/bin/python3 /usr/bin/python","title":"0 Preparando Entorno"},{"location":"DJANGO/Project%20dj-prods-api/#1-paquetes-necesarios","text":"Instalamos los paquetes necesesarios. pip install django pip install djangorestframework","title":"1 Paquetes Necesarios"},{"location":"DJANGO/Project%20dj-prods-api/#optionals-for-gh-and-hk","text":"Enlistar requirements de nuestro entorno variable en un txt. para luego poderlo exportar. pip freeze > requirements.txt Iniciar y subir repositiorio para tener control sobre nuestro codigo y sus cambios. git init && git add . && gh repo create && git commit -m \"start and conect project\" && git push -u origin master && git config --get remote.origin.url o con lift - gbash: git start","title":"OPTIONALS For GH  and  HK"},{"location":"DJANGO/Project%20dj-prods-api/#2-crando-proyecto-y-app-django","text":"1 Creamos un proyecto DJANGO nuevo: django-admin startproject DJprodsApi 2 Ingresamos al cd /DJprodsApi y creamos una aplicacion apirest : ./manage.py startapp apirest","title":"2 Crando Proyecto y App DJango"},{"location":"DJANGO/Project%20dj-prods-api/#3-configs-sqlite","text":"1 migramos los datos a nuestra BD por defecto SQLite : ./manage.py migrate 2 Creando Super User para el ADMIN: ./manage.py createsuperuser 3 Testeamos el funcionamiento de nuestro proyecto: ./manage.py runserver LAN: ./manage.py runserver 0.0.0.0:8000 | Para Server on LAN podemos o usar ngk necesitamos habilitar los hosts en JprodsApi/DJprodsApi/settings.py ALLOWED_HOSTS = ['*']","title":"3 Configs SQLite"},{"location":"DJANGO/Project%20dj-prods-api/#4-registrar-aplicacion-y-drf","text":"1 Nos dirigimos a JprodsApi/DJprodsApi/settings.py y agregamos a INSTALLED_APPS = [ #... #Estos dos valores: 'rest_framework', 'apirest' ]","title":"4 Registrar Aplicacion y DRF"},{"location":"DJANGO/Project%20dj-prods-api/#5-creando-modelo","text":"1 Nos hubicamos en JprodsApi/apirest/models.py no hay ningun modelo asi que agregamos una clase asi y tendriamos nuestro primer modelo. class Producto(models.Model): ##Atributos class Meta: verbose_name = (\"Producto\") verbose_name_plural = (\"Productos\") def __str__(self): return self.name #name Cambia segun Atributo queramos regresar 2 Agregamos ##Atributos a nuestro modelo. class Producto(models.Model): nombres=models.CharField(max_length=50) marca=models.CharField(max_length=50) codigo=models.CharField(max_length=8) emailemp=models.EmailField(max_length=50) created=models.DateTimeField(auto_now_add=True) updated=models.DateTimeField(auto_now=True) class Meta: verbose_name = (\"Producto\") verbose_name_plural = (\"Productos\") def __str__(self): return self.nombres 3 Ahora empaquetamos nuestra migracion con: ./manage.py makemigrations 4 Ahora si migramos nuestras nuevas makemigrations: ./manage.py migrate 5 Registramos nuestro modelo en JprodsApi/apirest/admin.py from django.contrib import admin from .models import Producto admin.site.register(Producto, ProductoAdmin) #Quita ProductoAdmin si no funciona Deberiamos de ver productos en nuestro admin al correr nuestro servidor.","title":"5 Creando MODELO"},{"location":"DJANGO/Project%20dj-prods-api/#6-admin-config","text":"1 Para esta config debemos agregar este codigo en nuestro JprodsApi/apirest/admin.py . from django.contrib import admin from .models import Producto #ADMING Config - para mostrar atributos de nuestros productos en el admin. class ProductoAdmin(admin.ModelAdmin): list_display = ('nombres', 'marca', 'codigo','emailemp') admin.site.register(Producto, ProductoAdmin)","title":"6 ADMIN Config"},{"location":"DJANGO/Project%20dj-prods-api/#7-serializers","text":"1 Creamos un nuevo archivo con el nombre de serializers.py dentro de JprodsApi/apirest/ y agregamos este codigo. from rest_framework import serializers from .models import Producto class ProductoSerializer(serializers.HyperlinkedModelSerializer): class Meta: model=Producto fields = ('id', 'nombres', 'marca', 'codigo','emailemp')","title":"7 Serializers"},{"location":"DJANGO/Project%20dj-prods-api/#8-vistas","text":"1 Ahora editamos JprodsApi/apirest/views.py . y agregamos. from rest_framework import viewsets from .serializers import ProductoSerializer from .models import Producto class ProductoViewSet (viewsets.ModelViewSet): queryset-Producto.objects.all() serializer_class = ProductoSerializer","title":"8 Vistas"},{"location":"DJANGO/Project%20dj-prods-api/#9-urls-o-rutas","text":"1 Ahora editamos JprodsApi/JprodsApi/urls.py . y agregamos. from django.contrib import admin from django.urls import path # urls from django.urls.conf import include from rest_framework import routers from apirest import views router=routers.DefaultRouter() router.register('productos', views.ProductoViewSet) # urls ## urlpatterns = [ path('admin/', admin.site.urls), # urls path('api/', include(router.urls)) # urls ## ]","title":"9 URLS o Rutas"},{"location":"DJANGO/Project%20dj-prods-api/#10-drf-permisos-de-escritura-y-paginate","text":"Permisos de escritura 1 Agreganos el siguiente codigo al final de JprodsApi/DJprodsApi/settings.py : # Esto hace que se limite el acceso segun lo configuremos REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': [ ## Habilitar para restringir escritura 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly', ## Habilitar para todos los permisos #'rest_framework.permissions.AllowAny', ], ## Activar estas dos para la paginate #'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination', #'PAGE_SIZE': 10 } Y listo esto har\u00e1 que ya no cualquiera con el enlace del api pueda enviar o modificar nuestros datos.","title":"10 DRF Permisos De Escritura y Paginate"},{"location":"DJANGO/Project%20dj-prods-api/#11-crud-vistas-basadas-en-clases","text":"1 Vamos a crear una nueva aplicaci\u00f3n llamada productos ./manage.py startapp productos 2 Registramos nuestra nueva app en settings.py del proyecto y deberia verse asi. INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'apirest', 'productos' #Nueva app ] 3 Dentro de JprodsApi/productos/ crearemos un nuevo archivo llamado urls.py de momento lo dejamos sin nada. 4 Ahora abrimos JprodsApi/productos/views.py y agregamos estas lineas: from django.views.generic import ListView,DetailView,CreateView,UpdateView,DeleteView from apirest.models import Producto class ProductoListView(ListView): model = Cliente #template_name = \".html\" 5 Nos dirigimos a JprodsApi/JprodsApi/urls.py principal y a\u00f1adimos. Agregamos esta importaci\u00f3n: from productos.views import ProductoListView ## .5 Y el path de productos: urlpatterns = [ path('admin/', admin.site.urls), # urls path('api/', include(router.urls)), # urls ## path('productos',ProductoListView.as_view(template_name=\"productos/index.html\"),name='listar') ## .5 ] 6 Ahora creamos dentro de JprodsApi/productos/ Creamos una carpeta nueva llamada templates . 7 Luego dentro de JprodsApi/productos/templates crearemos otra carpeta llamada productos y dentro de esta index.html . 8 Agregamos este codigo a nuestro index.html : <h1>Productos</h1> <ul> {% for producto in object_list %} <li>{{ producto.nombres }} - {{ producto.marca }}</li> {% empty %} <li>No articles yet.</li> {% endfor %} </ul> yyy listo hasta aqui ya solo queda continuar con el dise\u00f1o.","title":"11 CRUD VISTAS BASADAS EN CLASES"},{"location":"DJANGO/Project%20dj-prods-api/#agregando-atributos-a-nuestro-modelo","text":"1 Nos vamos a JprodsApi/apirest/models.py y agregamos otro atributo, de esta manera es necesario que tenga default=\"\" de lo contrario nos saldr\u00e1 un error al crear la migraci\u00f3n. precio=models.CharField(max_length=8, default=\"\") 2 Ahora creamos la migraci\u00f3n y migramos. ./manage.py makemigrations ./manage.py migrate 3 Esto es adicional para la vista en el admin de nuestro producto, esto a\u00f1adira a la vista el valor del nuevo atributo, para ello agregamos nuestro atributo en JprodsApi/apirest/admin.py y deberia quedar asi: from .models import Producto class ProductoAdmin(admin.ModelAdmin): #New Atributo list_display = ('nombres', 'marca', 'precio', 'codigo','emailemp', 'id') admin.site.register(Producto, ProductoAdmin)","title":"Agregando Atributos a nuestro modelo"},{"location":"DPI/","text":"TRASH-CLI (papelera) Trash-cli es una herramienta para poder --- Exportar PATH Este metodo nos ayuda a que hagamos globales nuestra carpeta que contiene binarios o scripts para de esa manera poderlos llamar desde cualquier lugar. Ejemplo: A\u00d1ADIMOS estas lienas a nuestro .bashrc PATH=\"$PATH:/usr/games\" export PATH para que esto sea permanente FONT: https://rootsudo.wordpress.com/2014/04/06/el-path-la-ruta-de-linux-variables-de-entorno/","title":"TRASH-CLI (papelera)"},{"location":"DPI/#trash-cli-papelera","text":"Trash-cli es una herramienta para poder","title":"TRASH-CLI (papelera)"},{"location":"DPI/#-","text":"","title":"---"},{"location":"DPI/#exportar-path","text":"Este metodo nos ayuda a que hagamos globales nuestra carpeta que contiene binarios o scripts para de esa manera poderlos llamar desde cualquier lugar. Ejemplo: A\u00d1ADIMOS estas lienas a nuestro .bashrc PATH=\"$PATH:/usr/games\" export PATH para que esto sea permanente FONT: https://rootsudo.wordpress.com/2014/04/06/el-path-la-ruta-de-linux-variables-de-entorno/","title":"Exportar PATH"},{"location":"DPI/Bash-Games/","text":"COWSAY - FORTUNE Install 1 Command sudo apt-get install cowsay 2 PATHearemos la ruta donde se instal\u00f3 Cowsay y Fortune guardando esta ruta en nuestro .bashrc PATH=\"$PATH:/usr/games\" export PATH !# Ahora ya tenemos instalado cowsay Font: https://raspberrypi.stackexchange.com/questions/1091/cowsay-not-working 3 Fortune necesita de una libreria de datos llamada fortunes para decirnos algo podemos elegir entre fortunes-min y fortunes-es sudo apt-get update sudo apt-get install fortunes-es USOS cowsay hola mundo fortune | cowsay Cambiando a cow por tux linux: fortune | cowsay -f tux Para espa\u00f1ol: fortune es | cowsay VARIAS LINEAS (echo -e \"BASH manual\\n\"; echo -e \"Local BASH manual\\n\"; echo -e \"BASH repo\\n\"; echo -e \"BASH\") \\ | cowthink -W80 -f tux Font: https://unix.stackexchange.com/questions/133902/is-it-possible-to-inject-newlines-in-the-ouput-of-cowsay-cowthink-while-preservi FIGlet & Toilet Crea banners de texto AscII desde la terminal Install sudo apt install figlet toilet Ejemplos de uso Para cambiar a una fuente en particular, utilizaremos la opci\u00f3n -f. Las fuentes se van a leer desde el mismo directorio que cuando utilizamos FIGlet. toilet -f future Ubunlog.com Si queremos que la salida se cree en el centro, utilizaremos el argumento -c. Para ello abriremos una terminal (Ctrl+Alt+T) y escribimos en ella: figlet -c Ubunlog.com FONT: https://ubunlog.com/figlet-banners-ascii-terminal/","title":"COWSAY - FORTUNE"},{"location":"DPI/Bash-Games/#cowsay-fortune","text":"","title":"COWSAY - FORTUNE"},{"location":"DPI/Bash-Games/#install","text":"1 Command sudo apt-get install cowsay 2 PATHearemos la ruta donde se instal\u00f3 Cowsay y Fortune guardando esta ruta en nuestro .bashrc PATH=\"$PATH:/usr/games\" export PATH !# Ahora ya tenemos instalado cowsay Font: https://raspberrypi.stackexchange.com/questions/1091/cowsay-not-working 3 Fortune necesita de una libreria de datos llamada fortunes para decirnos algo podemos elegir entre fortunes-min y fortunes-es sudo apt-get update sudo apt-get install fortunes-es","title":"Install"},{"location":"DPI/Bash-Games/#usos","text":"cowsay hola mundo fortune | cowsay Cambiando a cow por tux linux: fortune | cowsay -f tux Para espa\u00f1ol: fortune es | cowsay","title":"USOS"},{"location":"DPI/Bash-Games/#varias-lineas","text":"(echo -e \"BASH manual\\n\"; echo -e \"Local BASH manual\\n\"; echo -e \"BASH repo\\n\"; echo -e \"BASH\") \\ | cowthink -W80 -f tux Font: https://unix.stackexchange.com/questions/133902/is-it-possible-to-inject-newlines-in-the-ouput-of-cowsay-cowthink-while-preservi","title":"VARIAS LINEAS"},{"location":"DPI/Bash-Games/#figlet-toilet","text":"Crea banners de texto AscII desde la terminal","title":"FIGlet &amp; Toilet"},{"location":"DPI/Bash-Games/#install_1","text":"sudo apt install figlet toilet","title":"Install"},{"location":"DPI/Bash-Games/#ejemplos-de-uso","text":"Para cambiar a una fuente en particular, utilizaremos la opci\u00f3n -f. Las fuentes se van a leer desde el mismo directorio que cuando utilizamos FIGlet. toilet -f future Ubunlog.com Si queremos que la salida se cree en el centro, utilizaremos el argumento -c. Para ello abriremos una terminal (Ctrl+Alt+T) y escribimos en ella: figlet -c Ubunlog.com FONT: https://ubunlog.com/figlet-banners-ascii-terminal/","title":"Ejemplos de uso"},{"location":"DPI/NGROK/","text":"EJECUTAR ngrok http 80 FONTS Video Principal","title":"NGROK"},{"location":"DPI/NGROK/#ejecutar","text":"ngrok http 80","title":"EJECUTAR"},{"location":"DPI/NGROK/#fonts","text":"Video Principal","title":"FONTS"},{"location":"HEROKU/INIT/","text":"CONECTARSE A UNA APP NOS POSAMOS EN EL MISMO REPOSITORIO SINCRONIZADO CON HEROKU heroku login heroku apps heroku git:remote -a myaplication SHELL / BASH - HEROKU M\u00c9TODO UNO heroku login heroku apps heroku run bash --app myaplication ----- Segundo modo SHELL / BASH heroku login heroku apps heroku git:remote -a myaplication heroku run bash Otro modo es entrando en el mismo repositorio: font: https://stackoverflow.com/questions/35857787/running-bash-on-heroku-wont-work PUSH TO HEROKU git push heroku main font: https://stackoverflow.com/questions/52704791/how-to-connect-to-the-selected-app-with-heroku-cli PUSH & DEPLOY heroku git:remote -a new_app git push heroku main font: https://stackoverflow.com/questions/52704791/how-to-connect-to-the-selected-app-with-heroku-cli Using CLI Plugins https://devcenter.heroku.com/articles/using-cli-plugins VIM INSTALL ON HEROKU instalar vim: heroku plugins:install @jasonheecs/heroku-vim abrir con vim: heroku vim -a **","title":"INIT"},{"location":"HEROKU/INIT/#conectarse-a-una-app","text":"NOS POSAMOS EN EL MISMO REPOSITORIO SINCRONIZADO CON HEROKU heroku login heroku apps heroku git:remote -a myaplication","title":"CONECTARSE A UNA APP"},{"location":"HEROKU/INIT/#shell-bash-heroku","text":"M\u00c9TODO UNO heroku login heroku apps heroku run bash --app myaplication ----- Segundo modo SHELL / BASH heroku login heroku apps heroku git:remote -a myaplication heroku run bash Otro modo es entrando en el mismo repositorio: font: https://stackoverflow.com/questions/35857787/running-bash-on-heroku-wont-work PUSH TO HEROKU git push heroku main font: https://stackoverflow.com/questions/52704791/how-to-connect-to-the-selected-app-with-heroku-cli PUSH & DEPLOY heroku git:remote -a new_app git push heroku main font: https://stackoverflow.com/questions/52704791/how-to-connect-to-the-selected-app-with-heroku-cli Using CLI Plugins https://devcenter.heroku.com/articles/using-cli-plugins","title":"SHELL / BASH - HEROKU"},{"location":"HEROKU/INIT/#vim-install-on-heroku","text":"instalar vim: heroku plugins:install @jasonheecs/heroku-vim abrir con vim: heroku vim -a **","title":"VIM INSTALL ON HEROKU"},{"location":"HUGO-md/","text":"Install HUGO sudo apt-getupdate sudo apt-get install hugo -- sudo hugo version Run Server On LAN hugo server --themesDir ../.. --bind=0.0.0.0 --baseURL=http://192.168.0.130:1313 Hugo + Netlify + Forestry - PID 1. FONT: https://www.youtube.com/watch?v=sqyj9dl_fQo&ab_channel=Carlos","title":"Install HUGO"},{"location":"HUGO-md/#install-hugo","text":"sudo apt-getupdate sudo apt-get install hugo -- sudo hugo version","title":"Install HUGO"},{"location":"HUGO-md/#run-server","text":"","title":"Run Server"},{"location":"HUGO-md/#on-lan","text":"hugo server --themesDir ../.. --bind=0.0.0.0 --baseURL=http://192.168.0.130:1313","title":"On LAN"},{"location":"HUGO-md/#hugo-netlify-forestry-pid","text":"1. FONT: https://www.youtube.com/watch?v=sqyj9dl_fQo&ab_channel=Carlos","title":"Hugo + Netlify + Forestry  - PID"},{"location":"JEKYLL/","text":"EMPEZANDO INSTALACI\u00d3N 1. Primero instalaremos Ruby, que es un administrador de paquetes que usamos para instalar Jekyll : sudo apt-get update sudo apt-get install software-properties-common -y sudo apt-get install ruby-full -y 2. A continuaci\u00f3n, para instalar jekyll, use los siguientes comandos: sudo gem install jekyll sudo gem install bundler Font: https://raspberrypi-guide.github.io/other/installing-jekyll-webserver // ISSUE with g++ Es posible que tengamos errores al instalar jekyll por el tema de nos falte este archivo g++-aarch64-linux-gnu en ese caso debemos onstalar dicho paquete: sudo apt-get update sudo apt-get install g++-aarch64-linux-gnu Font: https://howtoinstall.co/es/g++-aarch64-linux-gnu NUEVO PROYECTO LIMPIO jekyll new my-awesome-site cd my-awesome-site bundle exec jekyll serve // Serve on LAN: jekyll serve --host=0.0.0.0 INICIAR CON PLANTILLA Clonar repositorio: git clone https://github.com/wowthemesnet/mundana-theme-jekyll.git mundana -- Ingresar a la carpeta donde se clon\u00f3: cd mundana -- Instalar (gemas) o depedencias: bundle install -- Ejecutar servidor: bundle exec jekyll serve -H 0.0.0.0 Font: https://github.com/wowthemesnet/mundana-theme-jekyll SITIOS DE TEMPLATES: https://jekyllthemes.io/free Templates-list JEKYLL ADMIN UI Estos pasos son para instalar el administrador grafico de JEKYLL en nuestros proyectos, para de esta manera poder CONFIG Abrir Directorio Jekyll del proyecto Abra el archivo config.yml y agregamos el siguiente codigo. `- jekyll-admin` 3. Abrir GemFile y a\u00f1adir el siguiente codigo: gem \"jekyll-admin 4. Ejecute el servidor: bundle exec jekyll serve -H 0.0.0.0 Y ahora deberiamos poder visualizar en: http://192.168.0.130:4000/admin !# Link de ejemplo podra variar entre http://localhost:4000/admin o http://127.168.0.130:4000/admin Font: https://akhilgeorge.com/install-admin-dashboard-on-your-jekyll-blog // Errores No ejecuta el servidor Pueda que uno de los errores sea que estemos olvidando agregar bundle exec al comando de ejecuci\u00f3n: bundle exec jekyll serve -H 0.0.0.0 Font: https://github.com/jekyll/jekyll/issues/7054 jekyll-admin | Not Found Otro pueda que sea por el tema de que falte instalar jekyll-admin ``` gem install jekyll-admin ``` bundle install Es posible que necesitemos este comando para poder instalar las dependencias necesarias. bundle install Buscador - PID https://blog.webjeda.com/instant-jekyll-search/ Jekyll to GitHub Pages Configuraci\u00f3n Subimos nuestro proyecto a nuestro repositorio como de costumbre desde la rama MASTER de nuestro repositorio, pero antes debemos de tener la siguiente configuraci\u00f3n en nuestro _config.yml baseurl: '/jekyll-mundana-deploy' url: 'https://lfrakie.github.io' 1 . baseurl: \"Aqui ir\u00e1 el nombre de nuestrorepositorio o subPath de nuestro sitio web ejem /jekyll-mundana-deploy \" 2 . url: \"Aqui va la base host \" Resultado Ver DEMO GitHub Project: https://github.com/LFrakie/jekyll-mundana-deploy FONT: - https://www.youtube.com/watch?v=z6dx_OUChRs&ab_channel=Otimic -","title":"EMPEZANDO"},{"location":"JEKYLL/#empezando","text":"","title":"EMPEZANDO"},{"location":"JEKYLL/#instalacion","text":"1. Primero instalaremos Ruby, que es un administrador de paquetes que usamos para instalar Jekyll : sudo apt-get update sudo apt-get install software-properties-common -y sudo apt-get install ruby-full -y 2. A continuaci\u00f3n, para instalar jekyll, use los siguientes comandos: sudo gem install jekyll sudo gem install bundler Font: https://raspberrypi-guide.github.io/other/installing-jekyll-webserver","title":"INSTALACI\u00d3N"},{"location":"JEKYLL/#issue-with-g","text":"Es posible que tengamos errores al instalar jekyll por el tema de nos falte este archivo g++-aarch64-linux-gnu en ese caso debemos onstalar dicho paquete: sudo apt-get update sudo apt-get install g++-aarch64-linux-gnu Font: https://howtoinstall.co/es/g++-aarch64-linux-gnu","title":"// ISSUE with g++"},{"location":"JEKYLL/#nuevo-proyecto-limpio","text":"jekyll new my-awesome-site cd my-awesome-site bundle exec jekyll serve","title":"NUEVO PROYECTO LIMPIO"},{"location":"JEKYLL/#serve-on-lan","text":"jekyll serve --host=0.0.0.0","title":"// Serve on LAN:"},{"location":"JEKYLL/#iniciar-con-plantilla","text":"Clonar repositorio: git clone https://github.com/wowthemesnet/mundana-theme-jekyll.git mundana -- Ingresar a la carpeta donde se clon\u00f3: cd mundana -- Instalar (gemas) o depedencias: bundle install -- Ejecutar servidor: bundle exec jekyll serve -H 0.0.0.0 Font: https://github.com/wowthemesnet/mundana-theme-jekyll","title":"INICIAR CON PLANTILLA"},{"location":"JEKYLL/#sitios-de-templates","text":"https://jekyllthemes.io/free Templates-list","title":"SITIOS DE TEMPLATES:"},{"location":"JEKYLL/#jekyll-admin-ui","text":"Estos pasos son para instalar el administrador grafico de JEKYLL en nuestros proyectos, para de esta manera poder","title":"JEKYLL ADMIN UI"},{"location":"JEKYLL/#config","text":"Abrir Directorio Jekyll del proyecto Abra el archivo config.yml y agregamos el siguiente codigo. `- jekyll-admin` 3. Abrir GemFile y a\u00f1adir el siguiente codigo: gem \"jekyll-admin 4. Ejecute el servidor: bundle exec jekyll serve -H 0.0.0.0 Y ahora deberiamos poder visualizar en: http://192.168.0.130:4000/admin !# Link de ejemplo podra variar entre http://localhost:4000/admin o http://127.168.0.130:4000/admin Font: https://akhilgeorge.com/install-admin-dashboard-on-your-jekyll-blog","title":"CONFIG"},{"location":"JEKYLL/#errores","text":"","title":"// Errores"},{"location":"JEKYLL/#no-ejecuta-el-servidor","text":"Pueda que uno de los errores sea que estemos olvidando agregar bundle exec al comando de ejecuci\u00f3n: bundle exec jekyll serve -H 0.0.0.0 Font: https://github.com/jekyll/jekyll/issues/7054","title":"No ejecuta el servidor"},{"location":"JEKYLL/#jekyll-admin-not-found","text":"Otro pueda que sea por el tema de que falte instalar jekyll-admin ``` gem install jekyll-admin ```","title":"jekyll-admin   |  Not Found"},{"location":"JEKYLL/#bundle-install","text":"Es posible que necesitemos este comando para poder instalar las dependencias necesarias. bundle install","title":"bundle install"},{"location":"JEKYLL/#buscador-pid","text":"https://blog.webjeda.com/instant-jekyll-search/","title":"Buscador - PID"},{"location":"JEKYLL/#jekyll-to-github-pages","text":"","title":"Jekyll to GitHub Pages"},{"location":"JEKYLL/#configuracion","text":"Subimos nuestro proyecto a nuestro repositorio como de costumbre desde la rama MASTER de nuestro repositorio, pero antes debemos de tener la siguiente configuraci\u00f3n en nuestro _config.yml baseurl: '/jekyll-mundana-deploy' url: 'https://lfrakie.github.io' 1 . baseurl: \"Aqui ir\u00e1 el nombre de nuestrorepositorio o subPath de nuestro sitio web ejem /jekyll-mundana-deploy \" 2 . url: \"Aqui va la base host \"","title":"Configuraci\u00f3n"},{"location":"JEKYLL/#resultado","text":"Ver DEMO GitHub Project: https://github.com/LFrakie/jekyll-mundana-deploy FONT: - https://www.youtube.com/watch?v=z6dx_OUChRs&ab_channel=Otimic -","title":"Resultado"},{"location":"JEKYLL/PID/","text":"-- INCOM es para adjuntar temas pednientes o en desarrollo de ser porbadas. Citar con ZOTERO - APA https://forum.obsidian.md/t/new-plugin-citations-with-zotero/9793","title":"PID"},{"location":"JEKYLL/PID/#citar-con-zotero-apa","text":"https://forum.obsidian.md/t/new-plugin-citations-with-zotero/9793","title":"Citar con ZOTERO - APA"},{"location":"JEKYLL/Templates-list/","text":"- https://jekyllthemes.io/free","title":"Templates list"},{"location":"JEKYLL/Templates-list/#-httpsjekyllthemesiofree","text":"","title":"- https://jekyllthemes.io/free"},{"location":"MKDOCS/","text":"MkDocs MkDocs es un generador de sitios est\u00e1ticos r\u00e1pido , simple y francamente magn\u00edfico que est\u00e1 orientado a la creaci\u00f3n de documentaci\u00f3n de proyectos. Los archivos de origen de la documentaci\u00f3n se escriben en Markdown y se configuran con un solo archivo de configuraci\u00f3n YAML. Empiece por leer el tutorial introductorio y luego consulte la Gu\u00eda del usuario para obtener m\u00e1s informaci\u00f3n.","title":"MkDocs"},{"location":"MKDOCS/#mkdocs","text":"MkDocs es un generador de sitios est\u00e1ticos r\u00e1pido , simple y francamente magn\u00edfico que est\u00e1 orientado a la creaci\u00f3n de documentaci\u00f3n de proyectos. Los archivos de origen de la documentaci\u00f3n se escriben en Markdown y se configuran con un solo archivo de configuraci\u00f3n YAML. Empiece por leer el tutorial introductorio y luego consulte la Gu\u00eda del usuario para obtener m\u00e1s informaci\u00f3n.","title":"MkDocs"},{"location":"MKDOCS/CONFIGS/","text":"https://squidfunk.github.io/mkdocs-material/getting-started/ https://github.com/Snickdx/pwadocs","title":"CONFIGS"},{"location":"MKDOCS/GET%20STARTED/","text":"Instalaci\u00f3n Para instalar MkDocs, ejecute el siguiente comando desde la l\u00ednea de comandos: pip install mkdocs Creando un nuevo proyecto Comenzar es muy f\u00e1cil. Para crear un nuevo proyecto, ejecute el siguiente comando desde la l\u00ednea de comandos: mkdocs new my-project cd my-project Hay un solo archivo de configuraci\u00f3n llamado mkdocs.yml y una carpeta nombrada docs que contendr\u00e1 los archivos de origen de la documentaci\u00f3n ( docs es el valor predeterminado para la configuraci\u00f3n de docs_dir ). En este momento, la docs carpeta solo contiene una \u00fanica p\u00e1gina de documentaci\u00f3n, llamada index.md . MkDocs viene con un dev-server incorporado que le permite obtener una vista previa de su documentaci\u00f3n mientras trabaja en ella. Aseg\u00farese de estar en el mismo directorio que el mkdocs.yml archivo de configuraci\u00f3n y luego inicie el servidor ejecutando el mkdocs serve comando: mkdocs serve Abra http://127.0.0.1:8000/ en su navegador y ver\u00e1 que se muestra la p\u00e1gina de inicio predeterminada: Build Eso luce bien. Est\u00e1 listo para implementar el primer paso de su MkLorum documentaci\u00f3n. Primero construye la documentaci\u00f3n: mkdocs build Esto crear\u00e1 un nuevo directorio, llamado site . Eche un vistazo dentro del directorio: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml Elegir otra carpeta mkdocs build -d docs-obsi-pub Fonts: https://www.mkdocs.org/getting-started/#building-the-site","title":"GET STARTED"},{"location":"MKDOCS/GET%20STARTED/#instalacion","text":"Para instalar MkDocs, ejecute el siguiente comando desde la l\u00ednea de comandos: pip install mkdocs","title":"Instalaci\u00f3n"},{"location":"MKDOCS/GET%20STARTED/#creando-un-nuevo-proyecto","text":"Comenzar es muy f\u00e1cil. Para crear un nuevo proyecto, ejecute el siguiente comando desde la l\u00ednea de comandos: mkdocs new my-project cd my-project Hay un solo archivo de configuraci\u00f3n llamado mkdocs.yml y una carpeta nombrada docs que contendr\u00e1 los archivos de origen de la documentaci\u00f3n ( docs es el valor predeterminado para la configuraci\u00f3n de docs_dir ). En este momento, la docs carpeta solo contiene una \u00fanica p\u00e1gina de documentaci\u00f3n, llamada index.md . MkDocs viene con un dev-server incorporado que le permite obtener una vista previa de su documentaci\u00f3n mientras trabaja en ella. Aseg\u00farese de estar en el mismo directorio que el mkdocs.yml archivo de configuraci\u00f3n y luego inicie el servidor ejecutando el mkdocs serve comando: mkdocs serve Abra http://127.0.0.1:8000/ en su navegador y ver\u00e1 que se muestra la p\u00e1gina de inicio predeterminada:","title":"Creando un nuevo proyecto"},{"location":"MKDOCS/GET%20STARTED/#build","text":"Eso luce bien. Est\u00e1 listo para implementar el primer paso de su MkLorum documentaci\u00f3n. Primero construye la documentaci\u00f3n: mkdocs build Esto crear\u00e1 un nuevo directorio, llamado site . Eche un vistazo dentro del directorio: $ ls site about fonts index.html license search.html css img js mkdocs sitemap.xml","title":"Build"},{"location":"MKDOCS/GET%20STARTED/#elegir-otra-carpeta","text":"mkdocs build -d docs-obsi-pub","title":"Elegir otra carpeta"},{"location":"MKDOCS/GET%20STARTED/#fonts","text":"https://www.mkdocs.org/getting-started/#building-the-site","title":"Fonts:"},{"location":"NETLIFY/","text":"CMS HUGO |# Al usar el iniciador automatico nos pide un nombre para nuestro repositorio que se crear\u00e1 en GitHub, pero se crea un nombre aleatrio para el sitename y el problema es que cuando queremos personalizar ese nombre la pagina se rompe. SOLUCI\u00d3N: Lo que haremos ser\u00e1 irnos a Deploys >> Trigger deploy >> Clear cache and deploi site , esto renombrar\u00e1 nuestro sitio correctamente sin que se rompa. y listo: PROJECT: https://github.com/LFrakie/hugo-cms-netlify-example DEMO: https://hugo-cms-netlify-example.netlify.app/","title":"CMS HUGO"},{"location":"NETLIFY/#cms-hugo","text":"|# Al usar el iniciador automatico nos pide un nombre para nuestro repositorio que se crear\u00e1 en GitHub, pero se crea un nombre aleatrio para el sitename y el problema es que cuando queremos personalizar ese nombre la pagina se rompe.","title":"CMS HUGO"},{"location":"NETLIFY/#solucion","text":"Lo que haremos ser\u00e1 irnos a Deploys >> Trigger deploy >> Clear cache and deploi site , esto renombrar\u00e1 nuestro sitio correctamente sin que se rompa. y listo: PROJECT: https://github.com/LFrakie/hugo-cms-netlify-example DEMO: https://hugo-cms-netlify-example.netlify.app/","title":"SOLUCI\u00d3N:"},{"location":"OBSIDIAN/0%20DOC%20Obsidian/","text":"## 1 TITULOS & SUBTITULOS Consulta HEADERS: / HEADERS 2 ESCRITURA BASICA En Negrita: **En negrita** = En negrita y texto normal Alternativa: _Texto en negrita_ = Texto en negrita y texto normal Cursiva **En cursiva** = En cursiva y texto normal. Texto en cursiva 2 con: _texto_ Esto es codigo insertado (Alt+96) Cursiva y Negrita Texto en cursiva y negrita Texto en cursiva y negrita ==Resaltado== ~~tachado~~ 3 Ecuaciones $$ \\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,. $$ CITAS Cita De Ejemplo CENTRADO CENTRADO Y EN NEGRITA //TEST CODE: css p { color: red; text-align: center;}","title":"0 DOC Obsidian"},{"location":"OBSIDIAN/0%20DOC%20Obsidian/#2-escritura-basica","text":"","title":"2 ESCRITURA BASICA"},{"location":"OBSIDIAN/0%20DOC%20Obsidian/#en-negrita","text":"**En negrita** = En negrita y texto normal Alternativa: _Texto en negrita_ = Texto en negrita y texto normal","title":"En Negrita:"},{"location":"OBSIDIAN/0%20DOC%20Obsidian/#cursiva","text":"**En cursiva** = En cursiva y texto normal. Texto en cursiva 2 con: _texto_ Esto es codigo insertado (Alt+96)","title":"Cursiva"},{"location":"OBSIDIAN/0%20DOC%20Obsidian/#cursiva-y-negrita","text":"Texto en cursiva y negrita Texto en cursiva y negrita ==Resaltado== ~~tachado~~","title":"Cursiva y Negrita"},{"location":"OBSIDIAN/0%20DOC%20Obsidian/#3-ecuaciones","text":"$$ \\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,. $$","title":"3 Ecuaciones"},{"location":"OBSIDIAN/0%20DOC%20Obsidian/#citas","text":"Cita De Ejemplo CENTRADO CENTRADO Y EN NEGRITA //TEST CODE: css p { color: red; text-align: center;}","title":"CITAS"},{"location":"OBSIDIAN/CREAR-TEMA/","text":"","title":"CREAR TEMA"},{"location":"OBSIDIAN/HEADERS/","text":"Esto es un H1 # Esto es un H1 Esto es un H2 ## Esto es un H2 Esto es un H3 ### Esto es un H3 Esto es un H4 #### Esto es un H4 Esto es un H5 ##### Esto es un H5 Esto es un H6 ###### Esto es un H6","title":"Esto es un H1"},{"location":"OBSIDIAN/HEADERS/#esto-es-un-h1","text":"# Esto es un H1","title":"Esto es un H1"},{"location":"OBSIDIAN/HEADERS/#esto-es-un-h2","text":"## Esto es un H2","title":"Esto es un H2"},{"location":"OBSIDIAN/HEADERS/#esto-es-un-h3","text":"### Esto es un H3","title":"Esto es un H3"},{"location":"OBSIDIAN/HEADERS/#esto-es-un-h4","text":"#### Esto es un H4","title":"Esto es un H4"},{"location":"OBSIDIAN/HEADERS/#esto-es-un-h5","text":"##### Esto es un H5","title":"Esto es un H5"},{"location":"OBSIDIAN/HEADERS/#esto-es-un-h6","text":"###### Esto es un H6","title":"Esto es un H6"},{"location":"PYTHON/VirtualENV/","text":"crear un entorno virtual 1. Generamos el entorno e ingresamos a nuestra carpeta o entrono creado: virtualenv NOMBREdelEntorno o especificando version de entorno virtual: virtualenv -p python3 NOMBREdelEntorno 2. Ingresamos a nuestra carpeta o entrono que acabamso de crear: cd NOMBREdelEntorno 3. Activamos el entorno virtual con este codigo: source bin/activate | Al activar nuestro entorno deberiamos poder ver el nombre buestro entorno virtaul creado de esta manera en el terminal: 4. Desactivar entorno virtual deactivate Listar Paquetes pip freeze pip freeze > requirements.txt pip install -r requirements.txt rm -rf EntornoVirtual/ FONTS https://coffeebytes.dev/python-virtualenv-tutorial-basico/","title":"VirtualENV"},{"location":"PYTHON/VirtualENV/#listar-paquetes","text":"pip freeze","title":"Listar Paquetes"},{"location":"PYTHON/VirtualENV/#_1","text":"pip freeze > requirements.txt pip install -r requirements.txt rm -rf EntornoVirtual/","title":""},{"location":"PYTHON/VirtualENV/#fonts","text":"https://coffeebytes.dev/python-virtualenv-tutorial-basico/","title":"FONTS"}]}